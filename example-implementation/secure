// SPDX-License-Identifier: MIT
//
// Trivial example implementation of P1315 `secure_clear`
//
// It just forwards the call to OS-specific functions. See the paper for
// references to actual implementations used in production in several
// major projects.
//
// Copyright (c) 2019 Miguel Ojeda <miguel@ojeda.io>

#pragma once

#include <memory> // std::addressof
#include <utility> // std::size_t
#include <type_traits> // std::is_trivially_copyable_v

#if defined(_WIN32)
#    include <Windows.h> // SecureZeroMemory
#elif defined(__linux__) || defined(__unix__)
#    include <string.h> // explicit_bzero
#else
#    error Unsupported platform
#endif

namespace std
{
    inline void secure_clear(void* data, size_t size) noexcept
    {
#if _WIN32
        SecureZeroMemory(data, size);
#elif defined(__linux__)  || defined(__unix__)
        explicit_bzero(data, size);
#else
#    error Unsupported platform
#endif
    }

    template <class T>
    void secure_clear(T& object) noexcept
    {
        static_assert(std::is_trivially_copyable_v<T>);
        secure_clear(addressof(object), sizeof(object));
    }
}

